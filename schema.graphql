"""
Cohort details
"""
type Cohort @entity {
  "fee configuration for protocol"
  feeConfiguration: FeeConfiguration!
  "default referral percentage"
  referralPercentage: BigInt!
  "all the cohort detail will available in cohort"
  cohort: CohortDetails
  "all the cohort tokens"
  tokens: [Token]!
  "all the reward token for cohort"
  rewards: Reward!
  "all the booster information in cohort"
  boosters: [Booster]!
  ""
  deployedAtBlockNumber: BigInt!
  "cohort timestamp when it deployed"
  deployedAt: BigInt!
}

"""
Protocol fee configuration
"""
type FeeConfiguration @entity {
  "fee wallet address stored in feeWalletAddress"
  feeWalletAddress: Bytes!
  "fee percentage stored in feeAmount"
  feeAmount: BigInt!
}

"""
Reward Configuration
"""
type Reward @entity {
  "reward token stored in rewardTokens"
  rewardTokens: [String!]!
  "per block reward stored in pbr"
  pbr: [BigInt!]!
}

"""
Cohort Details
"""
type CohortDetails @entity {
  "unifarm cohort address"
  cohortId: Bytes!
  "unifarm cohort version"
  cohortVersion: String!
  "unifarm cohort start block number"
  startBlock: BigInt!
  "unifarm cohort end block number"
  endBlock: BigInt!
  "epochBlocks"
  epochBlocks: BigInt!
  "has liquidity mining in cohort"
  hasLiquidityMining: Boolean!
  "has weth token in cohort"
  hasContainsWrappedToken: Boolean!
  "has cohort lock in available"
  hasCohortLockinAvaliable: Boolean!
}

"""
Token Details
"""
type Token @entity {
  "farm id"
  fid: BigInt!
  "farm token"
  farmToken: Bytes!
  "user minimum staking allowed"
  userMinStake: BigInt!
  "user maximum staking allowed"
  userMaxStake: BigInt!
  "total stake limit of farm"
  totalStakeLimit: BigInt!
  "token decimals"
  decimals: BigInt!
  "skip"
  skip: Boolean!
  ""
  totalStaking: BigInt!
  ""
  totalParticipants: BigInt!
  ""
  activeParticipants: BigInt!

}

"""
Booster pack details
"""
type Booster @entity {
  "booster pack Id"
  bpid: BigInt!
  "payment token address"
  paymentToken: Bytes!
  "booster pack amount for booster pack"
  boosterPackAmount: BigInt!
  ""
  numberOfBoostedUser: BigInt!
  ""
  boosterSell: BigInt!
  ""
  booster: BoosterBuyHistory! @derivedFrom("booster")
}

"""
All bought booster pack details
"""
type BoosterBuyHistory @entity {
  "user wallet address"
  user: Bytes!
  ""
  cohortId: Bytes!
  "booster pack details"
  booster: Booster!
  "nft token id"
  nftTokenId: BigInt!
}

"""
Reward cliamed details
"""
type ClaimHistory @entity {
  "user address"
  user: Bytes!
  "cohort address"
  cohort: Cohort!
  "nft token id"
  tokenId: BigInt!
  "reward value"
  rValue: BigInt!
  "block number on which token is transferred"
  blockNumber: BigInt!
  "transaction hash"
  transactionHash: Bytes!
  "timestamp on which nft token is transferred"
  timestamp: BigInt!
}

"""
NFT Transfer details
"""
type Transfer @entity {
  "cohort address"
  cohort: Cohort!
  "sender address"
  from: Bytes!
  "reciever address"
  to: Bytes!
  "nft token id"
  tokenId: BigInt!
  "block number on which token is transferred"
  blockNumber: BigInt!
  "transaction hash"
  transactionHash: Bytes!
  "timestamp on which nft token is transferred"
  timestamp: BigInt!
}

"""
Referral details
"""
type Referral @entity {
  "cohort details"
  cohort: Cohort!
  "nft id"
  tokenId: BigInt!
  "referd user address"
  referedUser: Bytes!
  "referral address"
  referralAddress: Bytes!
  "farm id"
  farmId: BigInt!
  "reward value"
  rValue: BigInt!
  "block number on which token is transferred"
  blockNumber: BigInt!
  "transaction hash"
  transactionHash: Bytes!
  "timestamp on which nft token is transferred"
  timestamp: BigInt!
}
